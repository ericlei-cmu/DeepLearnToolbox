function net = dcnntrain(net, x, y, opts)
    input_do_rate = 0.9; %Percent of nodes kept from input
    hidden_do_rate = 0.75;
    
    m = size(x, 3); %Image data; 28x28x#images
    numbatches = m / opts.batchsize;
    if rem(numbatches, 1) ~= 0
        error('numbatches not integer');
    end
    net.rL = [];
    for i = 1 : opts.numepochs
        disp(['epoch ' num2str(i) '/' num2str(opts.numepochs)]);
        tic;
        kk = randperm(m);
        for l = 1 : numbatches
            batch_x = x(:, :, kk((l - 1) * opts.batchsize + 1 : l * opts.batchsize));
            batch_y = y(:,    kk((l - 1) * opts.batchsize + 1 : l * opts.batchsize));

            net = dcnnff(net, batch_x, input_do_rate, hidden_do_rate);
            net = dcnnbp(net, batch_y);
            net = dcnnapplygrads(net, opts);
            if isempty(net.rL)
                net.rL(1) = net.L;
            end
            net.rL(end + 1) = 0.99 * net.rL(end) + 0.01 * net.L; %Loss
        end
        toc;
    end
    
    
    if strcmp(net.layers{2}.type, 'c')
        for j = 1 : numel(net.layers{2}.a)
            for ii = 1 : numel(net.layers{2 - 1}.a)
                net.layers{2}.k{ii}{j} = net.layers{2}.k{ii}{j}*input_do_rate;
            end
            net.layers{2}.b{j} = net.layers{2}.b{j};
        end
    end
    for l = 3 : numel(net.layers)
        if strcmp(net.layers{l}.type, 'c')
            for j = 1 : numel(net.layers{l}.a)
                for ii = 1 : numel(net.layers{l - 1}.a)
                    net.layers{l}.k{ii}{j} = net.layers{l}.k{ii}{j}*hidden_do_rate;
                end
                net.layers{l}.b{j} = net.layers{l}.b{j};
            end
        end
    end

    a = net.ffW(1:5,1:5)
    net.ffW = net.ffW*hidden_do_rate;
    net.ffb = net.ffb;
    a = net.ffW(1:5,1:5)
    b = net.ffb
    
end
